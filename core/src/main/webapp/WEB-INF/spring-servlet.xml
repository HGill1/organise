<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<context:annotation-config />
	<context:component-scan base-package="com.jemmmedia.organise" />

	<!-- Enable annotation driven controllers, validation etc... -->
	<mvc:annotation-driven />
	
	<mvc:resources mapping="/resources/**" location="/resources/" /> 
	<mvc:resources mapping="/files/**" 		   location="file:${files.path}"/> 
	<mvc:resources mapping="/profileImages/**" location="file:${profileimage.path}"/>
	<mvc:default-servlet-handler/>

	<!-- <mvc:resources mapping="/resources/**" location="/resources/" /> -->
	<mvc:default-servlet-handler/>

	<context:property-placeholder location="classpath:application.properties" />
	<!-- <context:property-placeholder location="classpath:log4j.properties" /> -->

	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/phoenix"></property>
		<property name="username" value="root"></property>
		<property name="password" value="password"></property>
	</bean> -->
	<!-- Declare a datasource that has pooling capabilities -->
	<bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
	destroy-method="close" p:driverClass="${jdbc.driverClassName}"
	p:jdbcUrl="${jdbc.url}" p:user="${jdbc.username}" p:password="${jdbc.password}"
	p:acquireIncrement="10" 
	p:idleConnectionTestPeriod="60"
	p:maxPoolSize="100" 
    p:maxStatements="0" 
    p:minPoolSize="10" 
    p:initialPoolSize="10" />

  <!-- Declare a transaction manager -->
    <bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="datasource" />

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="datasource" />
		<!-- <property name="mapperLocations" value="classpath*:com.jemmmedia.phoenix.mappers/**/*.xml" /> -->
		<!-- <property name="configLocation" value="WEB-INF/mybatis-config.xml" /> -->
	</bean>

	<!-- scan for mappers and will automatically scan the whole classpath for xmls -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
  		<property name="basePackage" value="com.jemmmedia.organise.mybatis.db.mybatis.dao" />
 	</bean>
 	
 	<!-- Configure the multipart resolver -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- one of the properties available; the maximum file size in bytes -->
        <property name="maxUploadSize" value="10000000"/>
    </bean>

    

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"	value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"
       p:prefixJson="true" />
	
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages"/>
		<property name="cacheSeconds" value="1"/>
	</bean>
	
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="webmaster@jemm-media.co.uk" />
		<property name="password" value="JEMMWebM2*%chusteczki" />

		<property name="javaMailProperties">
		   <props>
	                <!-- Use SMTP transport protocol -->
	                <prop key="mail.transport.protocol">smtp</prop>
	                <!-- Use SMTP-AUTH to authenticate to SMTP server -->
	                <prop key="mail.smtp.auth">true</prop>
	                <!-- Use TLS to encrypt communication with SMTP server -->
	                <prop key="mail.smtp.starttls.enable">true</prop>
	                <prop key="mail.debug">false</prop>
	        </props>
		</property>
	</bean>
	
	<bean id="alertMailMessage" class="org.springframework.mail.SimpleMailMessage">
        <property name="from" value="noreply@organise.net"/>
        <property name="to" value="noreply@organise.net"/>
        <property name="subject" value="Alert - Exception occurred. Please investigate"/>
 </bean>
 
 <bean id="reminderNotificationUtl" class="com.jemmmedia.organise.service.impl.utility.ReminderNotificationUtl" />

<!-- Spring Quartz -->
	<bean name="reminderNotification" class="org.springframework.scheduling.quartz.JobDetailBean">

		<property name="jobClass" value="com.jemmmedia.organise.service.impl.controller.ReminderNotificationController" />

		<property name="jobDataAsMap">
			<map>
				<entry key="runMeTask" value-ref="reminderNotificationUtl" />
			</map>
		</property>

	</bean>
	
	<!-- Simple Trigger, run every 5 seconds -->
	<!-- <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">

		<property name="jobDetail" ref="runMeJob" />
		<property name="repeatInterval" value="5000" />
		<property name="startDelay" value="1000" />

	</bean> -->
	
	<!-- Cron Trigger, run every 5 seconds -->
	 <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">

		<property name="jobDetail" ref="reminderNotification" />
		<!-- <property name="cronExpression" value="0/20 * * * * ?" /> -->

	</bean> 
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!--  <property name="jobDetails">
			<list>
				<ref bean="runMeJob" />
			</list>
		</property>  -->

		<!-- <property name="triggers">
			<list>
				<ref bean="cronTrigger" />
			</list>
		</property> -->
	</bean>

	<!-- <tx:annotation-driven/> -->
	
	<!--
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:journal-config" />
	</bean>
	 -->
	
	 
</beans>